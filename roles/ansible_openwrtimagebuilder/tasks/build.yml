---
- name: set kernel parameters for build
  ansible.builtin.lineinfile:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/.config"
    regexp: "^{{ item.name }}="
    line: "{{ item.name }}={{ item.value }}"
  loop: "{{ openwrt_imagebuilder_kernelvars }}"
  when: openwrt_imagebuilder_kernelvars is defined
- name: remove duplicates from list
  ansible.builtin.set_fact:
    openwrt_packages_installimagebuilder: "{{ openwrt_packages_installimagebuilder | unique }}"
  when: openwrt_packages_runimagebuilder | default(false)
- name: List packages that will be in the image
  debug:
    var: openwrt_packages_installimagebuilder
- name: Convert imagebuilder packages into list
  ansible.builtin.set_fact:
    openwrt_packages_installimagebuilder: "{{ openwrt_packages_installimagebuilder | join(' ') }}"
  when: openwrt_packages_installimagebuilder is defined
- name: Create image
  ansible.builtin.shell: make image PACKAGES="{{ openwrt_packages_installimagebuilder|default("") }}" FILES="{{ openwrt_imagebuilder_filesdir }}"
  args:
    chdir: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}"
- name: compress and remove for user set path
  community.general.archive:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/bin"
    dest: "{{ openwrt_imagebuilder_destinationpath }}/{{ inventory_hostname }}.tar.gz"
    remove: true
  when: openwrt_imagebuilder_destinationpath is defined
- name: compress images and remove
  community.general.archive:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/bin"
    dest: "{{ openwrt_imagebuilder_outputdir }}/{{ inventory_hostname }}.tar.gz"
    remove: true
  when: not openwrt_imagebuilder_destinationpath is defined

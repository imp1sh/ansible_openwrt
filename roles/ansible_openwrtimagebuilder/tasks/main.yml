---
# todo, install packages necessary for imagebuilder on building host
# tasks file for ansible_openwrtimagebuilder
- name: make sure builddir exists
  ansible.builtin.file:
    path: "{{ openwrt_imagebuilder_builddir }}"
    state: directory
- name: make sure outputdir exists
  ansible.builtin.file:
    path: "{{ openwrt_imagebuilder_outputdir }}"
    state: directory
- name: get filename from url
  ansible.builtin.set_fact:
    openwrt_imagebuilder_filename: "{{ openwrt_imagebuilder_downloadurl | basename }}"
- name: check if download is needed
  ansible.builtin.stat:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_filename }}"
  register: downloaded_file
- name: conditional download file
  ansible.builtin.get_url:
    url: "{{ openwrt_imagebuilder_downloadurl }}"
    dest: "{{ openwrt_imagebuilder_builddir }}"
  when: not downloaded_file.stat.exists
- name: extract imagebuilder
  ansible.builtin.unarchive:
    src: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_filename }}"
    list_files: true
    dest: "{{ openwrt_imagebuilder_builddir }}"
  register: openwrt_imagebuilder_extraction
- name: get extracted folder name
  ansible.builtin.set_fact:
    openwrt_imagebuilder_extractedfolder: "{{ openwrt_imagebuilder_extraction.files[0] }}"
- name: remove old files dir if exist
  ansible.builtin.file:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}{{ openwrt_imagebuilder_filesdir }}"
    state: absent
- name: create empty files dir
  ansible.builtin.file:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}{{ openwrt_imagebuilder_filesdir }}"
    state: directory
- name: set this files directory to use as openwrt deployroot for all compatible roles
  ansible.builtin.set_fact:
    "{{ item }}": "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}{{ openwrt_imagebuilder_filesdir }}/"
  loop:
    - openwrt_acme_deployroot
    - openwrt_batmanadv_deployroot
    - openwrt_babeld_deployroot
    - openwrt_bmx7_deployroot
    - openwrt_dhcp_deployroot
    - openwrt_dropbear_deployroot
    - openwrt_firewall_deployroot
    - openwrt_network_deployroot
    - openwrt_restic_deployroot
    - openwrt_services_deployroot
    - openwrt_system_deployroot
- name: run all openwrt roles that are compatible with imagebuilder
  ansible.builtin.include_role:
    name: "{{ item }}"
  loop: "{{ openwrt_imagebuilder_roles }}"
- name: set kernel parameters for build
  ansible.builtin.lineinfile:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/.config"
    regexp: "^{{ item.name }}="
    line: "{{ item.name }}={{ item.value }}"
  loop: "{{ openwrt_imagebuilder_kernelvars }}"
  when: openwrt_imagebuilder_kernelvars is defined
- name: remove duplicates from list
  ansible.builtin.set_fact:
    openwrt_packages_installimagebuilder: "{{ openwrt_packages_installimagebuilder | unique }}"
  when: openwrt_packages_runimagebuilder | default(false)
- name: List packages that will be in the image
  debug:
    var: openwrt_packages_installimagebuilder
- name: Convert imagebuilder packages into list
  ansible.builtin.set_fact:
    openwrt_packages_installimagebuilder: "{{ openwrt_packages_installimagebuilder | join(' ') }}"
  when: openwrt_packages_installimagebuilder is defined
- name: Create image
  ansible.builtin.shell: make image PACKAGES="{{ openwrt_packages_installimagebuilder|default("") }}" FILES="{{ openwrt_imagebuilder_filesdir }}"
  args:
    chdir: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}"
- name: compress and remove for user set path
  community.general.archive:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/bin"
    dest: "{{ openwrt_imagebuilder_destinationpath }}/{{ inventory_hostname }}.tar.gz"
    remove: true
  when: openwrt_imagebuilder_destinationpath is defined
- name: compress images and remove
  community.general.archive:
    path: "{{ openwrt_imagebuilder_builddir }}/{{ openwrt_imagebuilder_extractedfolder }}/bin"
    dest: "{{ openwrt_imagebuilder_outputdir }}/{{ inventory_hostname }}.tar.gz"
    remove: true
  when: not openwrt_imagebuilder_destinationpath is defined
